package api.controllers.components;

import api.storage.DUUIMongoDBStorage;
import api.storage.MongoDBFilters;
import com.mongodb.client.model.*;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import static api.routes.DUUIRequestHelper.isNullOrEmpty;
import static api.storage.DUUIMongoDBStorage.convertObjectIdToString;

public class DUUIComponentController {

    // The set of updates that can be made to a component.
    private static final Set<String> ALLOWED_UPDATES = Set.of(
        "name",
        "description",
        "tags",
        "status",
        "driver",
        "target",
        "parameters",
        "options",
        "index"
    );


    public static Document getDefaultComponent() {
        return new Document()
            .append("name", "New Component")
            .append("description", "")
            .append("tags", new ArrayList<>())
            .append("driver", null)
            .append("target", null)
            .append("options", getDefaultOptions())
            .append("parameters", new Document())
            .append("created_at", Instant.now().toEpochMilli())
            .append("modified_at", Instant.now().toEpochMilli())
            .append("pipeline_id", null)
            .append("user_id", null)
            .append("index", null);
    }

    public static Document getDefaultOptions() {
        return new Document()
            .append("scale", 1)
            .append("use_GPU", true)
            .append("docker_image_fetching", true)
            .append("keep_alive", false)
            .append("constraints", new ArrayList<>())
            .append("labels", new ArrayList<>())
            .append("host", null)
            .append("ignore_200_error", true)
            .append("registry_auth",
                new Document()
                    .append("username", null)
                    .append("password", null)
            );
    }

    /**
     * Given a {@link Document} of options for a component, compare to the default options
     * by filling out missing values and checking invalid entries.
     *
     * @param options the user defined options for a component.
     * @return the options with added missing entries.
     */
    public static Document mergeOptions(Document options) {
        if (isNullOrEmpty(options)) {
            return getDefaultOptions();
        } else {
            Document defaultOptions = getDefaultOptions();
            for (String key : defaultOptions.keySet()) {
                if (!options.containsKey(key)) {
                    options.put(key, defaultOptions.get(key));
                }
            }
        }
        return options;
    }

    /**
     * Retrieve one component given its id.
     *
     * @param id A unique 24 character identifier generated by MongoDB.
     * @return A {@link Document} containing the component data or null if nothing matched.
     */
    public static Document findOneById(String id) {
        try {
            Document component = DUUIMongoDBStorage
                .Components()
                .find(Filters.eq(new ObjectId(id)))
                .first();
            return convertObjectIdToString(component);
        } catch (IllegalArgumentException exception) {
            return null;
        }
    }

    /**
     * Retrieve one or more components from the database given a{@link MongoDBFilters} object.
     *
     * @param filters A {@link MongoDBFilters} object that contains filter options.
     * @return A Document containing a list of matched components.
     */
    public static List<Document> findMany(MongoDBFilters filters) {
        List<Bson> aggregationPipeline = new ArrayList<>();

        if (!filters.getFilters().isEmpty()) {
            aggregationPipeline.add(Aggregates.match(Filters.and(filters.getFilters())));
        }

        if (filters.getSearch() != null) {
            aggregationPipeline.add(
                Aggregates.addFields(new Field<>("joined_tags", new Document("$reduce",
                        new Document("input", "$tags")
                            .append("initialValue", "")
                            .append("in",
                                new Document("$concat",
                                    List.of("$$value", new Document("$cond",
                                        List.of(new Document("$eq", List.of("$$value", "")), "", " ")), "$$this"))))
                    )
                )
            );
            aggregationPipeline.add(
                Aggregates.addFields(
                    new Field<>(
                        "search",
                        new Document(
                            "$concat",
                            List.of("$name", " ", "$description", " ", "$joined_tags", " ", "$driver", " ", "$target")
                        )
                    )
                )
            );
            aggregationPipeline.add(
                Aggregates.match(
                    new Document("search", Pattern.compile(filters.getSearch(), Pattern.CASE_INSENSITIVE))
                )
            );

            aggregationPipeline.add(
                Aggregates.project(
                    Projections.exclude("joined_tags", "search")
                )
            );
        }
        if (filters.getSort() != null) {
            aggregationPipeline.add(Aggregates.sort(
                filters.getOrder() == 1
                    ? Sorts.ascending(filters.getSort())
                    : Sorts.descending(filters.getSort())
            ));
        }

        if (filters.getSkip() > 0) aggregationPipeline.add(Aggregates.skip(filters.getSkip()));
        if (filters.getLimit() > 0) aggregationPipeline.add(Aggregates.limit(filters.getLimit()));

        List<Document> components = DUUIMongoDBStorage
            .Components()
            .aggregate(aggregationPipeline)
            .into(new ArrayList<>());

        components.forEach(DUUIMongoDBStorage::convertObjectIdToString);
        return components;
    }

    public static Document insertOne(Document component) {
        Document defaultComponent = getDefaultComponent();
        for (Map.Entry<String, Object> entry : defaultComponent.entrySet()) {
            if (!component.containsKey(entry.getKey())) {
                component.put(entry.getKey(), entry.getValue());
            }
        }

        component.put("options", mergeOptions(component.get("options", Document.class)));

        DUUIMongoDBStorage
            .Components()
            .insertOne(component);

        convertObjectIdToString(component);
        return component;
    }

    public static Document updateOne(String id, Document updates) {
        ObjectId oid = new ObjectId(id);

        if (updates.containsKey("options")) {
            updates.put("options", mergeOptions(updates.get("options", Document.class)));
        }

        DUUIMongoDBStorage
            .updateDocument(
                DUUIMongoDBStorage.Components(),
                Filters.eq(oid),
                updates,
                ALLOWED_UPDATES);

        DUUIMongoDBStorage
            .Components()
            .updateOne(
                Filters.eq(oid),
                Updates.set("modified_at", Instant.now().toEpochMilli()));

        return DUUIComponentController.findOneById(id);
    }


    public static boolean deleteOne(String id) {
        return DUUIMongoDBStorage
            .Components()
            .deleteOne(Filters.eq(new ObjectId(id)))
            .getDeletedCount() > 0;
    }


    /**
     * Delete all components matching a given filter
     *
     * @param filter A {@link Bson} filter to delete only selected components
     */
    public static void deleteMany(Bson filter) {
        DUUIMongoDBStorage
            .Components()
            .deleteMany(filter);
    }

    /**
     * Sets the index of the component, meaning the position in its pipeline.
     *
     * @param id    The component's id.
     * @param index The index in the pipeline.
     */
    public static void setIndex(String id, int index) {
        DUUIMongoDBStorage
            .Components()
            .updateOne(
                Filters.eq(new ObjectId(id)),
                Updates.set("index", index));
    }

}
